// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma init

// âœ” Your Prisma schema was created at prisma/schema.prisma
//   You can now open it in your favorite editor.

// Next steps:
// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
// 3. Run prisma db pull to turn your database schema into a Prisma schema.
// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Database Tables
enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Relation {
  SELF
  MOTHER
  FATHER
  BROTHER
  SISTER
  OTHER
}

enum MedicineType {
  TABLET
  CAPSULE
  SYRUP
  INJECTION
  OTHER
}

enum ConsumeWith {
  NORMAL_WATER
  WARM_WATER
  MILK
}

enum TimesPerDay {
  MORNING
  AFTERNOON
  EVENING
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(PATIENT)
  profile      Profile?
  appointments Appointment[]
}

model Profile {
  id              String   @id @default(uuid())
  updatedAt       DateTime @default(now()) @updatedAt
  profilePhoto    Bytes[] // ToDo: profilePhoto String? | https://github.com/prisma/prisma/issues/11782
  age             Int
  gender          Gender
  weight          Int?
  address         String   @default("Aurangabad")
  phoneNo         String?  @db.VarChar(10)
  belongsToUserId String   @unique
  belongsToUser   User     @relation(fields: [belongsToUserId], references: [id], onDelete: Cascade)
  members         Member[]
}

model Member {
  id                 String        @id @default(uuid())
  memberPhoto        Bytes[] // ToDo: profilePhoto String?
  name               String        @db.VarChar(100)
  gender             Gender
  age                Int
  relation           Relation
  weight             Int?
  address            String        @default("Aurangabad")
  belongsToProfileId String?
  belongsToProfile   Profile?      @relation(fields: [belongsToProfileId], references: [id], onDelete: Cascade)
  appointments       Appointment[]
  // profile photo
}

model Appointment {
  id                String        @id @default(uuid())
  date              DateTime
  time              DateTime
  updatedAt         DateTime?     @updatedAt
  description       String? // Additional dettails about appointment
  belongsToUser     User?         @relation(fields: [belongsToUserId], references: [id], onDelete: Cascade)
  belongsToUserId   String?
  belongsToMember   Member?       @relation(fields: [belongsToMemberId], references: [id], onDelete: Cascade)
  belongsToMemberId String?
  prescription      Prescription?
}

model Prescription {
  id                     String      @id @default(uuid())
  disease                String
  instructions           String?
  issuedDate             DateTime    @default(now())
  validTill              DateTime
  medicines              Medicine[]
  belongsToAppointmentId String      @unique
  belongsToAppointment   Appointment @relation(fields: [belongsToAppointmentId], references: [id], onDelete: Cascade)
}

model Medicine {
  id               String         @id @default(uuid())
  disease          String? // Disease: Fever, Cough, Cold (Tablet associated many dise)
  medicineType     MedicineType
  mainSalt         String?
  dose             Int? // 500mg, 10mg
  consumeWith      ConsumeWith?
  timesPerDay      TimesPerDay[]
  quantityEachTime String?
  prescriptions    Prescription[]
}

// model Chat {
//   id String @id @default(uuid())
// }
